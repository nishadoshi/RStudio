In depth soccer analytics project in the EPL from the season 2011-2012. 

library(tidyverse)
# Read in list of all games
scores = read.table("epl_data.csv", header = TRUE, sep = ",")

# Read in initial Elo rating, conference, and division
team_info = read.table("epl_initial_elos.csv", header = TRUE, sep = ",")

## Going to focus on 2011-2012 season data
## Season = 2011

regular_season_scores <- scores %>%
  filter(game_type == 'r' & season == 2011)


season_data <- subset(scores, season == "2011")

## Teams in the 2011 season 

# Step 1: List of teams in the 2011-2012 season (as before)
valid_teams_2011 <- c("Arsenal FC", "Aston Villa", "Blackburn Rovers", "Bolton Wanderers","Chelsea FC", "Everton FC", "Fulham FC", "Liverpool FC", "Manchester City", "Manchester United", "Newcastle United", "Norwich City", "Stoke City", "Sunderland AFC", "Swansea City", "Tottenham Hotspur", "Wigan Athletic", 
"Wolverhampton Wanderers", "West Bromwich Albion","Queens Park Rangers")

# Step 2: Filter the team_info dataset for teams that were in the 2011-2012 season
valid_teams_info <- team_info %>%
  filter(team %in% valid_teams_2011)

#Statistical Summary of Relevant Statistics:
# Assuming your data is stored in a data frame called regular_season_scores

# Create a list of all teams
all_teams <- unique(c(regular_season_scores$home_team, regular_season_scores$away_team))

# Create a data frame to store the summary
team_performance <- data.frame(
  Team = all_teams,
  Wins = 0,
  Losses = 0,
  Draws = 0
)

# Loop through each team and calculate their wins, losses, and draws
for (team in all_teams) {
  # Home performance
  home_games <- regular_season_scores[regular_season_scores$home_team == team, ]
  home_wins <- sum(home_games$home_score > home_games$away_score)
  home_losses <- sum(home_games$home_score < home_games$away_score)
  home_draws <- sum(home_games$home_score == home_games$away_score)
  
  # Away performance
  away_games <- regular_season_scores[regular_season_scores$away_team == team, ]
  away_wins <- sum(away_games$away_score > away_games$home_score)
  away_losses <- sum(away_games$away_score < away_games$home_score)
  away_draws <- sum(away_games$away_score == away_games$home_score)
  
  # Update the team_performance data frame
  team_performance[team_performance$Team == team, "Wins"] <- home_wins + away_wins
  team_performance[team_performance$Team == team, "Losses"] <- home_losses + away_losses
  team_performance[team_performance$Team == team, "Draws"] <- home_draws + away_draws
}

# View the summary table
print(team_performance)


# Load necessary library
library(dplyr)

# Create a data frame with the EPL 2011-2012 season data
epl_2011_2012 <- data.frame(
  Rank = c(3, 16, 19, 18, 6, 7, 9, 8, 1, 2, 5, 12, 17, 14, 13, 11, 4, 10, 15, 20),
  Team = c("Arsenal", "Aston Villa", "Blackburn", "Bolton", "Chelsea", "Everton", 
           "Fulham", "Liverpool", "Manchester City", "Manchester United", "Newcastle United", 
           "Norwich City", "QPR", "Stoke City", "Sunderland", "Swansea City", 
           "Tottenham", "West Brom", "Wigan Athletic", "Wolves"),
  MP = rep(38, 20), # Matches played for all teams
  W = c(21, 7, 8, 10, 18, 15, 14, 14, 28, 28, 19, 12, 10, 11, 11, 12, 20, 13, 11, 5),
  D = c(7, 17, 7, 6, 10, 11, 10, 10, 5, 5, 8, 11, 7, 12, 12, 11, 9, 8, 10, 10),
  L = c(10, 14, 23, 22, 10, 12, 14, 14, 5, 5, 11, 15, 21, 15, 15, 15, 9, 17, 17, 23),
  GF = c(74, 37, 48, 46, 65, 50, 48, 47, 93, 89, 56, 52, 43, 36, 45, 44, 66, 45, 42, 40),
  GA = c(49, 53, 78, 77, 46, 40, 51, 40, 29, 33, 51, 66, 66, 53, 46, 51, 41, 52, 62, 82),
  GD = c(25, -16, -30, -31, 19, 10, -3, 7, 64, 56, 5, -14, -23, -17, -1, -7, 25, -7, -20, -42),
  Pts = c(70, 38, 31, 36, 64, 56, 52, 52, 89, 89, 65, 47, 37, 45, 45, 47, 69, 47, 43, 25),
  Pts_per_MP = round(c(70, 38, 31, 36, 64, 56, 52, 52, 89, 89, 65, 47, 37, 45, 45, 47, 69, 47, 43, 25) / 38, 2),
  Attendance = c(60000, 33873, 22551, 23670, 41478, 33228, 25293, 44253, 47045, 75387, 49936, 26606, 
                 17295, 27226, 39095, 19946, 36026, 24798, 18634, 25682),
  Top_Scorer = c("Robin van Persie - 30", "Darren Bent - 9", "Yakubu Aiyegbeni - 17", "Ivan Klasnić - 8", 
                 "Frank Lampard, Daniel Sturridge - 11", "Nikica Jelavić - 9", "Clint Dempsey - 17", 
                 "Luis Suárez - 11", "Sergio Agüero - 23", "Wayne Rooney - 27", "Demba Ba - 16", 
                 "Grant Holt - 15", "Heiðar Helguson - 8", "Peter Crouch - 10", "Nicklas Bendtner - 8", 
                 "Danny Graham - 12", "Emmanuel Adebayor - 17", "Peter Odemwingie - 10", 
                 "Franco Di Santo - 7", "Steven Fletcher - 12"),
  Goalkeeper = c("Wojciech Szczęsny", "Shay Given", "Paul Robinson", "Ádám Bogdán", "Petr Čech", 
                 "Tim Howard", "Mark Schwarzer", "Pepe Reina", "Joe Hart", "David de Gea", 
                 "Tim Krul", "John Ruddy", "Paddy Kenny", "Asmir Begović", "Simon Mignolet", 
                 "Michel Vorm", "Brad Friedel", "Ben Foster", "Ali Al-Habsi", "Wayne Hennessey"),
  Notes = c("→ Champions League via league finish", "", "Relegated", "Relegated", 
            "→ Champions League via Champions League win", "", "", 
            "→ Europa League via cup win", "→ Champions League via league finish", 
            "→ Champions League via league finish", "→ Europa League via league finish", 
            "", "Relegated", "", "", "", "→ Europa League via league finish", 
            "", "", "Relegated")
)

# 1. Goals Scored (GF) vs. Goals Conceded (GA) Bar Plot
epl_long <- epl_2011_2012 %>%
  select(Team, GF, GA) %>%
  tidyr::pivot_longer(cols = c(GF, GA), names_to = "Type", values_to = "Goals")

ggplot(epl_long, aes(x = reorder(Team, -Goals), y = Goals, fill = Type)) +
  geom_bar(stat = "identity", position = "dodge") +
  scale_fill_manual(values = c("lightblue", "orange")) +
  labs(title = "Goals Scored (GF) vs. Goals Conceded (GA) - 2011/2012 EPL", 
       x = "Team", 
       y = "Goals", 
       fill = "Type") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# 2. Goal Difference (GD) Bar Plot
ggplot(epl_2011_2012, aes(x = reorder(Team, -GD), y = GD, fill = GD > 0)) +
  geom_bar(stat = "identity", width = 0.7) +
  scale_fill_manual(values = c("lightblue", "orange")) +
  labs(title = "Goal Difference (GD) - 2011/2012 EPL", 
       x = "Team", 
       y = "Goal Difference") +
  geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  guides(fill = "none")

# 3. Points Per Team Bar Plot
ggplot(epl_2011_2012, aes(x = reorder(Team, -Pts), y = Pts, fill = Pts)) +
  geom_bar(stat = "identity", width = 0.7) +
  scale_fill_gradient(low = "orange", high = "brown") +
  labs(title = "Points Per Team - 2011/2012 EPL", 
       x = "Team", 
       y = "Points") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  guides(fill = "none")


## Creation of Scoring Distribution:

# Calculate margin of victory
regular_season_scores <- regular_season_scores %>%
  mutate(margin_of_victory = abs(home_score - away_score))

# Histogram for Home Scores
ggplot(regular_season_scores, aes(x = home_score)) +
  geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Home Scores", x = "Home Score", y = "Frequency") +
  theme_minimal()

# Histogram for Away Scores
ggplot(regular_season_scores, aes(x = away_score)) +
  geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Away Scores", x = "Away Score", y = "Frequency") +
  theme_minimal()

# Histogram for Margin of Victory
ggplot(regular_season_scores, aes(x = margin_of_victory)) +
  geom_histogram(binwidth = 1, fill = "lightblue", color = "black", alpha = 0.7) +
  labs(title = "Histogram of Margin of Victory", x = "Margin of Victory", y = "Frequency") +
  theme_minimal()

# Scatter plot comparing Home Scores and Away Scores
ggplot(regular_season_scores, aes(x = home_score, y = away_score)) +
  geom_point(color = "purple", alpha = 0.5) +
  labs(title = "Scatterplot: Home Score vs. Away Score", x = "Home Score", y = "Away Score") +
  theme_minimal()

# Numeric summaries
home_score_mean <- mean(regular_season_scores$home_score)
away_score_mean <- mean(regular_season_scores$away_score)

home_score_sd <- sd(regular_season_scores$home_score)
away_score_sd <- sd(regular_season_scores$away_score)

# Calculate margin of victory
regular_season_scores <- regular_season_scores %>%
  mutate(margin_of_victory = abs(home_score - away_score))

margin_of_victory_mean <- mean(regular_season_scores$margin_of_victory)
margin_of_victory_sd <- sd(regular_season_scores$margin_of_victory)

# Correlation between Home Score and Away Score
cor_home_away <- cor(regular_season_scores$home_score, regular_season_scores$away_score)

# Print the numeric summaries
cat("Home Score Mean: ", home_score_mean, "\n")
cat("Away Score Mean: ", away_score_mean, "\n")
cat("Home Score SD: ", home_score_sd, "\n")
cat("Away Score SD: ", away_score_sd, "\n")
cat("Margin of Victory Mean: ", margin_of_victory_mean, "\n")
cat("Margin of Victory SD: ", margin_of_victory_sd, "\n")
cat("Correlation between Home and Away Scores: ", cor_home_away, "\n")


#Calculation of Pythagorean Point Percentages: 
# Assuming 'regular_season_scores' and 'team_info' datasets are loaded

# Step 1: Filter valid teams from 2011 season
valid_teams_2011 <- regular_season_scores %>%
  filter(year == 2011) %>%
  select(home_team) %>%
  distinct() %>%
  bind_rows(regular_season_scores %>%
              filter(year == 2011) %>%
              select(away_team) %>%
              distinct()) %>%
  distinct()

# Step 2: Filter the team_info dataset to include only valid teams in 2011
valid_team_info <- team_info %>%
  filter(team %in% valid_teams_2011$home_team)

# Step 3: Calculate Total Points for each team (3 points for a win, 1 for a draw, 0 for a loss)
team_stats <- regular_season_scores %>%
  filter(home_team %in% valid_team_info$team) %>%
  group_by(home_team) %>%
  summarise(home_goals_scored = sum(home_score),
            home_goals_allowed = sum(away_score)) %>%
  left_join(regular_season_scores %>%
              filter(away_team %in% valid_team_info$team) %>%
              group_by(away_team) %>%
              summarise(away_goals_scored = sum(away_score),
                        away_goals_allowed = sum(home_score)),
            by = c("home_team" = "away_team")) %>%
  mutate(total_goals_scored = home_goals_scored + away_goals_scored,
         total_goals_allowed = home_goals_allowed + away_goals_allowed)

# Step 4: Calculate Actual Points (3 points for a win, 1 for a draw, 0 for a loss)
team_stats <- team_stats %>%
  left_join(regular_season_scores %>%
              group_by(home_team) %>%
              summarise(home_points = sum(case_when(
                home_score > away_score ~ 3,
                home_score == away_score ~ 1,
                TRUE ~ 0
              ))), by = c("home_team" = "home_team")) %>%
  left_join(regular_season_scores %>%
              group_by(away_team) %>%
              summarise(away_points = sum(case_when(
                away_score > home_score ~ 3,
                away_score == home_score ~ 1,
                TRUE ~ 0
              ))), by = c("home_team" = "away_team")) %>%
  mutate(total_points = home_points + away_points,
         total_games = nrow(regular_season_scores %>%
                              filter(home_team == home_team | away_team == home_team)),
         point_percentage = total_points / (38*3))

# Step 5: Calculate Pythagorean Point Percentage
team_stats <- team_stats %>%
  mutate(pythagorean_point_percentage = (total_goals_scored^2) / 
           ((total_goals_scored^2) + (total_goals_allowed^2)))


# Step 6: Correlation between Actual Point Percentage and Pythagorean Point Percentage
correlation <- cor(team_stats$point_percentage, team_stats$pythagorean_point_percentage)

# Step 7: Plot Comparison
ggplot(team_stats, aes(x = pythagorean_point_percentage, y = point_percentage)) +
  geom_point() +
  geom_smooth(method = "lm", color = "blue") +
  labs(title = "Comparison of Pythagorean Point Percentage vs Actual Point Percentage",
       x = "Pythagorean Point Percentage",
       y = "Actual Point Percentage") +
  theme_minimal()

# Print the correlation value
print(paste("Correlation between Actual and Pythagorean Point Percentage: ", correlation))

# Display the table of results
pythag_points<- team_stats %>% select(home_team, pythagorean_point_percentage, point_percentage)



# Step 2: Get a list of all unique team names
teams = sort(unique(valid_team_info$team)) 
off_teams = teams
def_teams = off_teams

# Step 3: Create column names for team offensive and defensive indicators
for (i in 1:length(off_teams)) {
    off_teams[i] = paste(off_teams[i], "Off.")
}

for (i in 1:length(def_teams)) {
    def_teams[i] = paste(def_teams[i], "Def.")
}

# Step 4: Create the data matrix for margin of victory, game location, and team offense/defense contributions
data_matrix = as.data.frame(matrix(nrow = 2 * nrow(regular_season_scores), ncol = 2 + 2 * length(teams)))

# Set the column names for Score, Location, and team indicators
colnames(data_matrix) = c("Score", "Location", off_teams, def_teams)

# Replace NA entries with 0 in the data matrix
data_matrix[is.na(data_matrix)] = 0

# Step 5: Loop through each row in the regular season score data to encode the team matchups
for (i in 1:nrow(regular_season_scores)) {
    # Home team logic
    for (j in 1:length(teams)) {
        if (regular_season_scores$home_team[i] == teams[j]) {
            data_matrix[i, j + 2] = 1  # Home team offense
            data_matrix[i + nrow(regular_season_scores), j + 2 + length(teams)] = -1  # Home team defense
            break
        }
    }
    
    # Away team logic
    for (j in 1:length(teams)) {
        if (regular_season_scores$away_team[i] == teams[j]) {
            data_matrix[i, j + 2 + length(teams)] = -1  # Away team defense
            data_matrix[i + nrow(regular_season_scores), j + 2] = 1  # Away team offense
            break
        }
    }
}

# Step 6: Set the scores in the data matrix for both home and away teams
data_matrix$Score = c(regular_season_scores$home_score, regular_season_scores$away_score)

# Set game location to 1 if home, 0 if away (this assumes location data is included in valid_team_info)
data_matrix$Location = c(regular_season_scores$location, 0 * regular_season_scores$location)

# Step 7: Fit the Poisson regression model
model_poisson = glm(Score ~ ., data = data_matrix, family = "poisson")

# View the summary of the model
summary(model_poisson)

model_summary = summary(model_poisson)

# Extract coefficients (includes estimates, standard errors, z-values, p-values)
coefficients_epl = as.data.frame(model_summary$coefficients)



## Elos for all teams
# Read in list of all games
scores = read.table("epl_data.csv", header = TRUE, sep = ",")

# Read in initial Elo rating, conference, and division
team_info = valid_team_info

# Specify season to analyze (this is just a single season)
simulated_season = 2011

# Set Elo rating parameters
weight = 19.9
hfa = 83.64

# Identify if ties exist in the sport (add 0.5 to margin of victory if ties exist)
if (sum(scores$tie) > 0) {
    tie_adj = 0.5 
} else {
    tie_adj = 0
}

# Filter games for the specified season (simulated_season)
season_schedule = scores[which(scores$season == simulated_season & scores$game_type == "r"),]

# Initialize Elo ratings using the team_info data
team_info$preseason_elo = team_info$rating  # Store initial Elo ratings for reference

# Iterate through all games in the season
for(i in 1:nrow(season_schedule)) {
    # Find indices corresponding to home and away teams for the current game
    home_index = which(team_info$team == season_schedule$home_team[i])
    away_index = which(team_info$team == season_schedule$away_team[i])
    
    # Get the Elo ratings for the home and away teams
    home_elo = team_info$rating[home_index]
    away_elo = team_info$rating[away_index]
    
    # Calculate home team win probability using the Elo formula
    win_prob = 1 / (10^((away_elo - (home_elo + hfa*season_schedule$location[i])) / 400) + 1)
    
    # Calculate the actual margin of victory
    score_diff = abs(season_schedule$home_score[i] - season_schedule$away_score[i])
    
    # Determine the home team result (win, loss, or tie)
    if(season_schedule$home_score[i] > season_schedule$away_score[i]) { 
        home_result = 1  # Home team wins
    } else if(season_schedule$home_score[i] < season_schedule$away_score[i]) { 
        home_result = 0  # Home team loses
    } else { 
        home_result = 0.5  # Tie
    }
  
    # Adjust the Elo ratings based on the game's result
    home_elo_adjustment = weight * log(score_diff + 1 + tie_adj) * (home_result - win_prob)
    
    # Update Elo ratings for both home and away teams
    team_info$rating[home_index] = team_info$rating[home_index] + home_elo_adjustment
    team_info$rating[away_index] = team_info$rating[away_index] - home_elo_adjustment
}

# After all games have been processed, team_info$rating holds the final Elo ratings for the season (postseason)

# Create a summary table of teams with their preseason and postseason Elo ratings
elo_comparison = data.frame(
  Team = team_info$team,
  Preseason_Elo = team_info$preseason_elo,
  Postseason_Elo = team_info$rating
)

# View the Elo ratings comparison
print(elo_comparison)




scores = read.table("epl_data.csv", header = TRUE, sep = ",")

# Read in initial Elo rating, conference, and division
elos = read.table("epl_initial_elos.csv", header = TRUE, sep = ",")


# Define the relevant parameters for the 2011 season
team = "Manchester City"  # Example team
first_season = 2011
last_season = 2011

weight = 19.9  # Elo weight adjustment (customized for your dataset)
hfa = 83.64    # Home-field advantage (customized for your dataset)

# If ties exist (e.g., draw), adjust this to handle the 0.5 points
if (sum(scores$tie) > 0) {
    tie_adj = 0.5
} else {
    tie_adj = 0
}

# Data frame for storing match results and Elo adjustments
team_results = data.frame(matrix(ncol = 10, nrow = 0))
colnames(team_results) = c("opponent", "pregame_elo", "opponent_pregame_elo", "win_probability", 
                           "result", "team_score", "opponent_score", "elo_adjustment", 
                           "postgame_elo", "opponent_postgame_elo")

# Iterate through the soccer season's match data
for (i in 1:nrow(scores)) {
    # Check if the match is from the 2011 season
    if (scores$season[i] >= first_season & scores$season[i] <= last_season) {
    
        # Find indices for home and away team Elo ratings
        home_index = which(elos$team == scores$home_team[i])
        away_index = which(elos$team == scores$away_team[i])
        
        # Home and away team Elo ratings
        home_elo = elos$rating[home_index]
        away_elo = elos$rating[away_index]
        
        # Calculate home team's win probability based on Elo ratings and home-field advantage
        win_prob = 1 / (10^((away_elo - (home_elo + hfa * scores$location[i])) / 400) + 1)
        
        # Calculate the score difference (margin of victory)
        score_diff = abs(scores$home_score[i] - scores$away_score[i])
        
        # Determine the result of the home team
        if (scores$home_score[i] > scores$away_score[i]) {
            home_result = 1  # Home team wins
        } else if (scores$home_score[i] < scores$away_score[i]) {
            home_result = 0  # Home team loses
        } else {
            home_result = 0.5  # Tie (draw)
        }
        
        # Adjust Elo based on score difference
        home_elo_adjustment = weight * log(score_diff + 1 + tie_adj) * (home_result - win_prob)
        
        # Update Elo ratings for both home and away teams
        elos$rating[home_index] = elos$rating[home_index] + home_elo_adjustment
        elos$rating[away_index] = elos$rating[away_index] - home_elo_adjustment
        
        # Store the game result for the specified team
        if (scores$season[i] == first_season & 
            (scores$home_team[i] == team | scores$away_team[i] == team)) {
            
            if (scores$home_team[i] == team) {  # If the team was at home
                team_results[nrow(team_results) + 1,] = c(
                    scores$away_team[i], elos$rating[home_index] - home_elo_adjustment, 
                    elos$rating[away_index] + home_elo_adjustment, win_prob, home_result, 
                    scores$home_score[i], scores$away_score[i], home_elo_adjustment, 
                    elos$rating[home_index], elos$rating[away_index]
                )
            } else {  # If the team was away
                team_results[nrow(team_results) + 1,] = c(
                    scores$home_team[i], elos$rating[away_index] + home_elo_adjustment, 
                    elos$rating[home_index] - home_elo_adjustment, 1 - win_prob, 1 - home_result, 
                    scores$away_score[i], scores$home_score[i], -1 * home_elo_adjustment, 
                    elos$rating[away_index], elos$rating[home_index]
                )
            }
        }
        
        # End of season regression (adjust Elo back towards 1500)
        if (i < nrow(scores) && scores$season[i + 1] > scores$season[i]) {  # New season
            for (j in 1:nrow(elos)) {  # For each team
                if (scores$season[i] >= elos$inaugural_season[j]) {
                    elos$rating[j] = elos$rating[j] - (elos$rating[j] - 1500) / 3
                }
            }
            
            # Expansion adjustments for new teams
            expansion_adjustment = -1 * (mean(elos[which(elos$inaugural_season <= (scores$season[i] + 1)),]$rating) - 1500)
            for (j in 1:nrow(elos)) {
                if ((scores$season[i] + 1) >= elos$inaugural_season[j]) {
                    elos$rating[j] = elos$rating[j] + expansion_adjustment
                }
            }
        }
    }
}

# Create plot of postgame Elo ratings for the specified team
plot(team_results$postgame_elo, type = "l", xlab = "Week", ylab = "Elo Rating")
abline(h = 1500)  # Reference line at Elo rating of 1500



##Simulate Regular Season ratings
set.seed(7)

# Read in list of all games
scores = read.table("epl_data.csv", header = TRUE, sep = ",")

# Read in initial Elo rating, conference, and division
team_info = read.table("epl_initial_elos.csv", header = TRUE, sep = ",")

# Specify season to simulate
simulated_season = 2011
iterations = 2500
weight = 19.9
hfa = 83.64

# Identify if ties exist in the sport, which determines if an additional 0.5 needs to be added to the margin of victory
if (sum(scores$tie) > 0) {
    tie_adj = 0.5 
} else {
    tie_adj = 0
}

# Obtain list of unique conference names and unique division names
conferences = na.omit(unique(team_info$conference))
divisions = na.omit(unique(team_info$division))

# Create list of games that occurred prior to season being simulated
pre_season = scores[which(scores$season < simulated_season & scores$season >= 1901),]

# Create list of regular season games for season being simulated
season_schedule = scores[which(scores$season == simulated_season & scores$game_type == "r"),]

# Iterate through all games in the sport's history up to season being simulated
for(i in 1:nrow(pre_season)) {
    # Find indices corresponding to home and away teams for current game
    home_index = which(team_info$team == pre_season$home_team[i])
    away_index = which(team_info$team == pre_season$away_team[i])
    
    # Find home and away team Elo ratings
    home_elo = team_info$rating[home_index]
    away_elo = team_info$rating[away_index]
    
    # Calculate home team win probability
    win_prob = 1 / (10^((away_elo - (home_elo + hfa*pre_season$location[i]))/400) + 1)
    
    # Calculate actual margin of victory - must be positive
    score_diff = abs(pre_season$home_score[i] - pre_season$away_score[i])   
  
    # Determine home team result
    if(pre_season$home_score[i] > pre_season$away_score[i]) { 
        home_result = 1  # Home team wins
    } else if(pre_season$home_score[i] < pre_season$away_score[i]) { 
        home_result = 0  # Home team loses
    } else { 
        home_result = 0.5  # Tie
    }
  
    # Calculate amount each team's Elo rating is adjusted by
    home_elo_adjustment = weight * log(score_diff + 1 + tie_adj) * (home_result - win_prob)
  
    # Adjust Elo ratings - add point to winner and subtract points from loser
    team_info$rating[home_index] = team_info$rating[home_index] + home_elo_adjustment
    team_info$rating[away_index] = team_info$rating[away_index] - home_elo_adjustment
    
    # Adjust Elo ratings at end of season to regress 1/3 of the way towards 1500
    if(i < nrow(scores) && scores$season[i+1] > scores$season[i]) {
        for(j in 1:nrow(team_info)) {
            if(scores$season[i] >= team_info$inaugural_season[j]) {
                team_info$rating[j] = team_info$rating[j] - (team_info$rating[j] - 1500)/3
            }
        }
    
        # Identify all teams that existed at beginning of following season
        existing_teams = team_info[which(team_info$inaugural_season <= (scores$season[i] + 1)),]
        
        # Calculate amount each team's Elo rating must be adjusted by to make mean 1500
        expansion_adjustment = -1*(mean(existing_teams$rating) - 1500)
        
        # Perform expansion adjustment on teams that existed at beginning of following season
        for(j in 1:nrow(team_info)) {
            if((scores$season[i] + 1) >= team_info$inaugural_season[j]) {
                team_info$rating[j] = team_info$rating[j] + expansion_adjustment
            }
        }
    }
}

# Create data frame to hold actual win totals and simulation results
results = data.frame(matrix(0, ncol = 6, nrow = nrow(team_info)))
colnames(results) = c("team", "starting_elo", "ending_elo", "actual_points", "average_points", "division_titles")
results$team = team_info$team

# Create data frame to hold number of wins by each team in each iteration
point_totals = data.frame(matrix(0, ncol = nrow(team_info), nrow = iterations))
colnames(point_totals) = team_info$team

for(i in 1:iterations) {
    season_stats = team_info[,which(colnames(team_info) != "inaugural_season")]
    season_stats$points = 0
    season_stats$rand = runif(nrow(team_info))
    
    for(j in 1:nrow(season_schedule)) {
        # Find indices corresponding to home and away teams for current game
        home_index = which(season_stats$team == season_schedule$home_team[j])
        away_index = which(season_stats$team == season_schedule$away_team[j])
        
        # Find home and away team Elo ratings
        home_elo = season_stats$rating[home_index]
        away_elo = season_stats$rating[away_index]
        
        # Calculate home team win and tie probabilities
        tie_prob = (1/(sqrt(4*pi))) * exp(-((away_elo - (home_elo + hfa*season_schedule$location[j]))^2/160000))
        win_prob = 1 / (10^((away_elo - (home_elo + hfa*season_schedule$location[j]))/400) + 1) - 0.50*tie_prob
        u = runif(1)
    
        if(u < win_prob) {  # Home team wins
            season_stats$points[home_index] = season_stats$points[home_index] + 3
        } else if(u < win_prob + tie_prob) {  # Tie/draw
            season_stats$points[home_index] = season_stats$points[home_index] + 1
            season_stats$points[away_index] = season_stats$points[away_index] + 1
        } else {  # Away team wins
            season_stats$points[away_index] = season_stats$points[away_index] + 3
        }

        # Calculate actual margin of victory - must be positive
        score_diff = abs(season_schedule$home_score[j] - season_schedule$away_score[j])   
        
        # Determine home team result
        if(season_schedule$home_score[j] > season_schedule$away_score[j]) { 
            home_result = 1  # Home team wins
        } else if(season_schedule$home_score[j] < season_schedule$away_score[j]) { 
            home_result = 0  # Home team loses
        } else { 
            home_result = 0.5  # Tie
        }
    
        # Calculate amount each team's Elo rating is adjusted by
        home_elo_adjustment = weight * log(score_diff + 1 + tie_adj) * (home_result - (win_prob + 0.5*tie_prob))
        
        # Adjust Elo ratings after game has been simulated to get team's new strength
        season_stats$rating[home_index] = season_stats$rating[home_index] + home_elo_adjustment
        season_stats$rating[away_index] = season_stats$rating[away_index] - home_elo_adjustment
    
        # Track actual season points on first iteration
        if(i == 1) {
            if(season_schedule$home_score[j] > season_schedule$away_score[j]) {
                results$actual_points[home_index] = results$actual_points[home_index] + 3
            } else if(season_schedule$home_score[j] < season_schedule$away_score[j]) {
                results$actual_points[away_index] = results$actual_points[away_index] + 3
            } else {
                results$actual_points[home_index] = results$actual_points[home_index] + 1
                results$actual_points[away_index] = results$actual_points[away_index] + 1
            }
        }
    }
  
    # Define data frame that contains division winners
    division_winners = data.frame(matrix(ncol = 6, nrow = 0))
    colnames(division_winners) = c("team", "conference", "division", "rating", "wins", "rand")
    
    # For each division
    for(div in divisions) {
        div_standings = season_stats[which(season_stats$division == div),]  # Identify all teams in current division
        div_standings = div_standings[order(-div_standings$points, -div_standings$rand),]  # Sort division by wins and random number
        division_winners = rbind(division_winners, div_standings[1,])  # Add division winner to 'division_winners' data frame
    }
  
    # Save end of season win totals (from column 5 of season_stats) for each iteration in the point_totals data frame
    point_totals[i,] = t(season_stats[5])
    
    # Add number of wins for each team during this iteration to sum
    results$average_points = results$average_points + season_stats$points
    
    # Increment the number of division titles for each division winner by 1
    for(team in division_winners$team) {
        index = which(season_stats$team == team)  # Index of division winner
        results$division_titles[index] = results$division_titles[index] + 1  # Increment division titles
    }
}

# Calculate average number of wins across all iterations
results$starting_elo = team_info$rating
results$ending_elo = season_stats$rating
results$average_points = results$average_points/iterations
results$division_titles = results$division_titles/iterations


results1 <- results


print(results1)

results$actual_wins <- results$actual_points / 3

# Calculate the simulated wins by dividing average_points by 3
results$simulated_wins <- results$average_points / 3

# We already have simulated division titles in the data
# Create a summary table with actual wins, simulated wins, and simulated division titles
summary_table <- data.frame(
  Team = results$team,
  Actual_Wins = results$actual_wins,
  Simulated_Wins = results$simulated_wins,
  Simulated_Division_Titles = results$division_titles
)

## Assuming 'summary_table' is your original data frame with the Team column

# Define the list of teams you're interested in
selected_teams <- c("Arsenal FC", "Aston Villa", "Blackburn Rovers", "Bolton Wanderers", 
                    "Chelsea FC", "Everton FC", "Fulham FC", "Liverpool FC", 
                    "Manchester City", "Manchester United", "Newcastle United", 
                    "Norwich City", "Stoke City", "Sunderland AFC", "Swansea City", 
                    "Tottenham Hotspur", "Wigan Athletic", "Wolverhampton Wanderers", 
                    "West Bromwich Albion", "Queens Park Rangers")

# Filter the summary_table to include only rows where the team is in the selected_teams list
team_summary <- summary_table %>%
  filter(Team %in% selected_teams)


View(team_summary)


ggplot(results, aes(x = actual_points, y = average_points)) +
  geom_point(color = 'orange') +
  labs(
    title = "Actual Points vs Simulated Points",
    x = "Actual Points",
    y = "Simulated Points"
  ) +
  theme_minimal()




##Over achieving team
# Assuming the data frame 'point_totals' contains Manchester City's point totals
hist(point_totals$`Manchester City`, 
     main = "Histogram of Point Totals for Manchester City", 
     xlab = "Points", 
     col = "orange", 
     border = "black", 
     breaks = 15)



##Underachieving team
hist(point_totals$`Aston Villa`, 
     main = "Histogram of Point Totals for Aston Villa", 
     xlab = "Points", 
     col = "orange", 
     border = "black", 
     breaks = 15)



